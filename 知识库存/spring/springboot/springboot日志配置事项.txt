springboot默认的日志系统
Springboot默认使用LogBack日志系统，新建项目一般会引用spring-boot-start或者spring-boot-start-web依赖。
其中spring-boot-start中引入了spring-boot-start-logging依赖，spring-boot-start-web中引用了spring-boot-start依赖。

如何将日志信息存储到文件
logging.path            属性用于配置日志文件的路径
logging.file            属性用于配置日志文件得名称，不配置则默认为spring.log
logging.path=/User/lizhixing/workSpace
logging.file=demo.log

如何设置日志级别
日志级别共有：Trace<Debug<Info<Warn<Error<Fatal<Off,且级别是逐渐提供，如果日志级别设置为Info，则意味着Trace，Debug级别的日志都看不到。
logging.level.root=info                          指定root目录下的所有文件得日志打印级别为info
logging.level.com.kjggg.bootdemo.config=warn     指定config目录下的所有文件得日志打印级别为warn

如何定制自己的日志
logging.pattern.console  该属性用于定制控制台日志输出格式
logging.pattern.file     该属性用于定制控制台日志输出格式

logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n
对应符号的含义如下：
%d{yyyy/MM/dd HH:mm:ss} 日志输出时间
%thread                 输出日志的进程名称
%-5level                日志级别，并且使用5个字符靠左对齐
%logger-                日志输出者的名称
%msg                    日志消息
%n                      平台的换行符

自定义日志配置项：
根据不同的日志系统，你可以按照如下规则组织配置文件名，就能被正确加载
Logback:                      logback-spring.xml,logback-spring.groovy,logback.xml,logback-spring.groovy
Log4j:                        log4j-spring.xml,log4j-spring.properties,log4j.properties,log4j.xml
Log4j2:                       log4j2-spring.xml,log4j.xml
JDK(java Utils Logging):      logging.properties

logging.config  该属性用于修改配置文件得名字。
logging.config = classpath:logging-config.xml

logback.xml属性详解
根节点包含的属性：
   1.scan:当此属性设置为true时，配置文件发生变换将会重新加载。默认值为true
   2.scanPeriod:配置检测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认为毫秒，当scan为true时，该属性生效，默认的时间间隔为1分钟。
   2.debug：当此属性设置为true时，将打印logback内部日志信息，实时查看logback运行状态，默认值为false；

子节点一：设置打印级别
root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
  level：用来设置打印级别，大小写无关，：trace,debug,info,warn,error,fatal,off.默认是debug
  可以包含零个或多个元素，，表识这个appender将会添加到这个loger.
<root level="debug">
  <appender-ref ref="console" />
  <appender-ref ref="file" />
</root>
子节点二：设置上下文名称
每个logger都关联到logger上下文，默认上下文名称为default，但是可以设置成其他的名字。用于区分不同应用程序的记录，一旦设置不能修改。可以通过%contextName来打印日志上下文记录，一般来说我们不用这个属性。
<contextName>logback</contextName>
子节点三：设置变量
用来定义变量值得标签，有两个属性，name和value；name是变量的名称，value是变量值
<property name="logback.logdir" value="/Users/inke/dev/log/tomcat"/>
<property name="logback.appname" value="app"/>
子节点四：appender用来格式化日志输出节点，有两个属性name和value；class指定那种输出策略；常用的有控制台输出策略以及文件输出策略。
控制台输出ConsoleAppender
<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback-demo</contextName>
    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d -1 %msg%n</pattern>
        </layout>
    </appender>
    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog2" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d -2 %msg%n</pattern>
        </encoder>
    </appender>
    <!--指定最基础的日志输出级别-->
    <root level="INFO">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="consoleLog1"/>
        <appender-ref ref="consoleLog2"/>
    </root>
</configuration>
输出到文件 RollingFileAppender
<appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
    所以我们使用下面的策略，可以避免输出 Error 的日志-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <!--过滤 Error-->
        <level>ERROR</level>
        <!--匹配到就禁止-->
        <onMatch>DENY</onMatch>
        <!--没有匹配到就允许-->
        <onMismatch>ACCEPT</onMismatch>
    </filter>
    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
    -->
    <File>${logback.logdir}/info.${logback.appname}.log</File>
    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
        <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
        <!--只保留最近90天的日志-->
        <maxHistory>90</maxHistory>
        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
        <!--<totalSizeCap>1GB</totalSizeCap>-->
    </rollingPolicy>
    <!--日志输出编码格式化-->
    <encoder>
        <charset>UTF-8</charset>
        <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
    </encoder>
</appender>
子节点五：设置一个包或一个类的日志打印级别
用于设置一个包或一个类的日志打印级别，仅有一个name属性，一个可选的level和一个可选的addtivity属性。
name：用来指定受此logger约束的某一个包或者具体的某一个类。
level：用于设置打印级别，与大小写无关，trace。debug，info，warn，error,fatal,off
addtivity:是否向上级logger传递打印信息，默认是true。
<logger name=""/>
<!--logback.LogbackDemo：类的全路径 -->
<logger name="" level="WARN" additivity="false">
    <appender-ref ref="console"/>
</logger>

注意： 
     1.若配置了logback.xml文件，则application.properties或者application.yml文件中的日志配置除了logger.level这个属性生效外，其余日志格式等属性配置均未生效
     2.若配置了logger.config属性，则logback.xml中相关配置项无效


