-- 创建触发器
````
DECLARE v NUMBER;
BEGIN
SELECT count(1) INTO v FROM user_triggers WHERE TRIGGER_NAME = 'RASCNCTR_TGR_TPRCJJBJSKU';
IF v > 0 THEN
execute IMMEDIATE 'DROP TRIGGER RASCNCTR_TGR_TPRCJJBJSKU';
END IF;
END;
go

CREATE TRIGGER RASCNCTR_TGR_TPRCJJBJSKU
AFTER INSERT OR UPDATE OR DELETE
  ON TPRCJJBJSKU
FOR each ROW
    BEGIN
    IF (inserting OR updating ) AND :NEW.POSCOMUPTYPE <> 2 THEN -- 记账生成调价商品信息
    INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('I','PMS',:NEW.JJBJBILLNO,'');
    ELSIF updating AND :NEW.POSCOMUPTYPE = 2  THEN -- 终止促销单
    INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('D','PMS',:NEW.JJBJBILLNO,'');
    ELSIF deleting THEN --deleting
    INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('D','PMS',:OLD.JJBJBILLNO,'');
    end IF;
    END;
go
````

````
DECLARE v NUMBER;
BEGIN
SELECT count(1) INTO v FROM all_triggers WHERE TRIGGER_NAME = 'RASCNCTR_TGR_MBR_MEMBER_GUEST';
IF v > 0 THEN
execute IMMEDIATE 'DROP TRIGGER RASCNCTR_TGR_MBR_MEMBER_GUEST';
END IF;
END;

go

CREATE TRIGGER RASCNCTR_TGR_MBR_MEMBER_GUEST
AFTER INSERT OR UPDATE OR DELETE
  ON MemberGuest
FOR each ROW
BEGIN
IF inserting THEN-- insert
INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('I','MBR',:new.MEMBERID,null);
ELSIF deleting THEN
INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('D','MBR',:old.MEMBERID,null);
ELSIF updating('MemberID') or updating('MOBILE') or updating('GuestName') or updating('GuestSex') or updating('BirthDay') or updating('Status') then
INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('U','MBR',:new.MEMBERID,null);
INSERT INTO "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP") VALUES ('U','MBR',:old.MEMBERID,null);
END IF;
END;

go
````

````
CREATE OR REPLACE TRIGGER TGR_BARCODE_GOODS
AFTER INSERT OR UPDATE OR DELETE
  ON GOODS
FOR each ROW
    BEGIN
    IF inserting THEN
        insert into "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP")
        SELECT 'I', 'BARCODE', :NEW.GOODSID,SHOPID FROM GOODSSHOP where GOODSID = :NEW.GOODSID;
    ELSIF deleting THEN
        insert into "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP")
        SELECT 'D', 'BARCODE', :OLD.GOODSID,SHOPID FROM GOODSSHOP where GOODSID = :OLD.GOODSID;
    ELSIF updating('UNITNAME') or updating('GOODSTYPEID') THEN
        insert into "BAAS_TRANSFER_LOG" ("ACTION", "TABLENAME", "PK", "SHOP")
        SELECT 'U', 'BARCODE', :NEW.GOODSID,SHOPID FROM GOODSSHOP where GOODSID = :NEW.GOODSID;
    end IF;
    end;
go
````