<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!--父项目的坐标，如果系统没有规定某个元素的值，那么父项目中的对应值即为项目的默认值-->
  <parent>
    <!--被继承的父项目的全球唯一标识符-->
    <groupId>org.springframework.boot</groupId>
    <!--被继承的父项目的构件标识符-->
    <artifactId>spring-boot-starter-parent</artifactId>
    <!--被继承父项目的版本-->
    <version>2.1.6.RELEASE</version>
    <!-- 父项目的pom文件的相对路径。相对路径允许你选择一个不同的路径，默认值是../pom.xml
     maven首先在构件当前项目的地方寻找父项目的pom,其次在文件系统的这个位置（ralativePath位置）
     然后在本地仓库，最后在远程仓库寻找父项目的pom-->
    <relativePath/>
  </parent>

  <!--声明项目遵守哪一个pom模型版本-->
  <modelVersion>4.0.0</modelVersion>
  <!--项目的全球唯一标识符-->
  <groupId>com.hd123</groupId>
  <!--构件的标识符，它和groupId一起唯一标识一个构件-->
  <artifactId>maven-demo</artifactId>
  <!--项目的当前版本-->
  <version>1.0-SNAPSHOT</version>
  <!--项目产生的构件类型-->
  <packaging>jar</packaging>
  <!--项目的名称-->
  <name>maven-demo</name>
  <!--项目主页的URL，maven产生的文档用-->
  <url>http://github.com/lizhixing/maven-demo.git</url>
  <!--项目的详细描述，maven产生的文档用-->
  <description>这是一个maven项目</description>

  <!--描述了这个项目构建的前提条件-->
  <prerequisites>
    <!--说明了构建该项目或使用该插件所需maven的最低版本-->
    <maven>3.0.4</maven>
  </prerequisites>

  <!--项目的问题管理系统-->
  <issueManagement>
    <!--问题管理系统的名字-->
    <system>JIRA</system>
    <!--该项目使用的问题管理系统的URL-->
    <url>http://hddenv:8080/jira/browse/MERCHANT</url>
  </issueManagement>

  <!--项目持续集成信息-->
  <ciManagement>
    <!--持续集成系统的名字，continuum-->
    <system>gump</system>
    <!--该项目使用的持续集成的url-->
    <url>http://vmgump.apache.org/gump/public/logging-log4j-12/logging-log4j-12/index.html</url>
    <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件(错误，失败，成功，警告)-->
    <notifiers>
      <!--配置一种方式，当构建中断时，以该方式通知用户/开发者-->
      <notifier>
        <!--发生错误时是否通知-->
        <sendOnError>false</sendOnError>
        <!--构建失败时是否通知-->
        <sendOnFailure>false</sendOnFailure>
        <!--构建成功时是否通知-->
        <sendOnSuccess>false</sendOnSuccess>
        <!--发生警告时是否通知-->
        <sendOnWarning>false</sendOnWarning>
        <!--不赞成使用，通知发送到哪里-->
        <address>http://localhost:8080</address>
        <!--传送通知的途径-->
        <type>email</type>
        <!--拓展配置项-->
        <configuration>
          <dept>Customer</dept>
        </configuration>
      </notifier>
    </notifiers>
  </ciManagement>

  <!--项目创建年份，4位数字，当产生版权信息时需要使用这个值-->
  <inceptionYear>2019</inceptionYear>

  <!--项目相关邮件列表信息-->
  <mailingLists>
    <!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息-->
    <mailingList>
      <!--邮件的名称-->
      <name>lizhixing626@163.com</name>
      <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto:链接会被自动创建-->
      <post>https://mail.163.com</post>
      <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto:链接会被自动创建-->
      <subscribe>https://mail.163.com</subscribe>
      <!--取消订阅邮件的地址或链接，，如果是邮件地址，创建文档时，mailto:链接会被自动创建-->
      <unsubscribe>https://mail.163.com</unsubscribe>
      <!--可以浏览邮件信息的url-->
      <archive>https://mail.163.com</archive>
    </mailingList>
  </mailingLists>

  <!--项目开发者列表-->
  <developers>
    <!--某个项目开发者的信息-->
    <developer>
      <!--scm里项目开发者的唯一标识符-->
      <id>lizhixing</id>
      <!--项目开发者的全名-->
      <name>李志兴</name>
      <!--项目开发者的邮件-->
      <email>lizhixing</email>
      <!--项目开发者的主页url-->
      <url>http://mail.hd123.com</url>
      <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色-->
      <roles>
        <role>dev</role>
        <role>test</role>
      </roles>
      <!--项目开发者的组织-->
      <organization>Shanghai HEADING Information Engineering Co., Ltd</organization>
      <!--项目开发这的组织url-->
      <organizationUrl>http://www.qianfan123.com</organizationUrl>
      <!--项目开发者属性，如即时消息如何处理等-->
      <properties>
        <dept>Customer</dept>
      </properties>
      <!--项目开发者所在时区，-11到12的整数-->
      <timezone>8</timezone>
    </developer>
  </developers>

  <!--项目的其他贡献者列表-->
  <contributors>
    <!--项目的其他贡献者-->
    <contributor>
      <!--项目贡献者的名称-->
      <name>李志兴</name>
      <!--项目贡献者的邮件-->
      <email>lizhixing</email>
      <!--项目贡献者的主页url-->
      <url>http://mail.hd123.com</url>
      <!--贡献者扮演的角色-->
      <roles>
        <role>dev</role>
        <role>test</role>
      </roles>
      <!--贡献者所在组织-->
      <organization>Shanghai HEADING Information Engineering Co., Ltd</organization>
      <!--贡献者所在组织的主页url-->
      <organizationUrl>http://www.qianfan123.com</organizationUrl>
      <!--项目贡献者的属性-->
      <properties>
        <dept>Customer</dept>
      </properties>
      <!--项目贡献者所在时区-->
      <timezone>8</timezone>
    </contributor>
  </contributors>

  <!--该元素描述了项目所有license列表，应该只列出该项目的license列表，不要列出依赖项目的license列表
  如果列出了多个license，用户可以选择它们中的一个而不是所有-->
  <licenses>
    <license>
      <!--license用于法律上的名称-->
      <name>maven</name>
      <!--官方license正文页面的url-->
      <url>http://localhost:8080/maven-demo</url>
      <!--项目分发的主要方式，repo可以从maven库下载，manual。用户必须手动下载和安装依赖-->
      <distribution>m2repo</distribution>
      <!--有关license的补充信息-->
      <comments>补充信息</comments>
    </license>
  </licenses>

  <!--SCM(Source Control Management)标签允许你配置你的代码库，供maven，web站点和其他插件使用-->
  <scm>
    <!--scm的url，该url描述了版本库和如何连接到版本库，该连接只读-->
    <connection>scm:git:http://github.app.hd123.cn:10080/service-center/sas-web.git</connection>
    <!--给开发者使用的，类似connection元素，即该连接不仅仅是只读-->
    <developerConnection>scm:git:http://github.app.hd123.cn:10080/service-center/sas-web.git</developerConnection>
    <!--当前代码的标签，在开发阶段默认为head-->
    <tag>HEAD</tag>
    <!--指向项目可浏览scm库的URL-->
    <url>http://github.app.hd123.cn:10080/service-center/sas-web.git</url>
  </scm>

  <!--描述项目所属组织的各种特性-->
  <organization>
    <!--组织的全名-->
    <name>Shanghai HEADING Information Engineering Co., Ltd</name>
    <!--组织主页的url-->
    <url>http://www.qianfan123.com</url>
  </organization>

  <!--构建项目需要的信息-->
  <build>
    <!--该元素设置了项目的源码目录，当构建项目时，构建系统会编译目录里的源码，该路径是相对于pom.xml的相对路径-->
    <sourceDirectory>./src/main/java</sourceDirectory>
    <!--该元素描述了项目脚本源码目录，该目录和源码目录不同，绝大多数情况下，该目录中的内容会被拷贝到输出目录-->
    <scriptSourceDirectory>./src/main/resources</scriptSourceDirectory>
    <!--该元素描述了单元测试的源码目录，当测试项目时，构建系统会编译目录里的源码，该路径是相对于pom.xml的路径-->
    <testSourceDirectory>./src/test/java</testSourceDirectory>
    <!--被编译过的应用程序class文件存放的目录-->
    <outputDirectory>./target/classes</outputDirectory>
    <!--被编译过得测试class文件存放的目录-->
    <testOutputDirectory>./target/test-classes</testOutputDirectory>
    <!--构建产生的所有文件的目录-->
    <directory>/target</directory>
    <!--构建产生的文件名称-->
    <finalName>demo</finalName>
    <!--使用来自该项目的一系列构建扩展-->
    <extensions>
      <!--描述使用到的构建扩展-->
      <extension>
        <!--构建扩展的groupId-->
        <groupId>com.hd123</groupId>
        <!--构建扩展的artifactId-->
        <artifactId>maven-demo</artifactId>
        <!--构建扩展的版本-->
        <version>1.0-SNAPSHOT</version>
      </extension>
    </extensions>
    <!--当项目没有规定目标时的默认值-->
    <defaultGoal>maven-demo</defaultGoal>
    <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件中-->
    <resources>
      <resource>
        <!--描述了资源的目标路径，该路径相对于target/classes目录，-->
        <targetPath>${project.build.outputDirectory}</targetPath>
        <!--是否使用参数值代替参数名，参数值取自properties元素或者文件里配置的属性，文件在filters元素列出-->
        <filtering>false</filtering>
        <!--存放资源的目录，该路径相对pom路径-->
        <directory>./src/main/resources</directory>
        <!--包含的模式列表,例如**/*.xml-->
        <includes>
          <include>*.yml</include>
        </includes>
        <!--排除的模式列表，例如**/*.xml-->
        <excludes>
          <exclude>*.xml</exclude>
        </excludes>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <!--描述了测试相关的资源的目标路径，该路径相对于target/classes目录，-->
        <targetPath>${project.build.outputDirectory}</targetPath>
        <!--是否使用参数值代替参数名，参数值取自properties元素或者文件里配置的属性，文件在filters元素列出-->
        <filtering>false</filtering>
        <!--存放测试相关的资源的目录，该路径相对pom路径-->
        <directory>./src/main/resources</directory>
        <!--包含的模式列表,例如**/*.xml-->
        <includes>
          <include>*.properties</include>
        </includes>
        <!--排除的模式列表，例如**/*.xml-->
        <excludes>
          <exclude>*.yml</exclude>
        </excludes>
      </testResource>
    </testResources>
    <!--当filtering开关打开时，使用过的过滤器属性文件列表-->
    <filters>
      <filter>com.hd123.mavendemo.MavenDemoFilter</filter>
    </filters>
    <!--子项目可以引用的默认插件信息，引用时只需引入groupId以及artifactId即可，若额外配置则会覆盖这里的配置。该插件配置项直到被引用时才会被解析或绑定到生命周期-->
    <pluginManagement>
      <!--使用的插件列表-->
      <plugins>
        <!--plugin元素包含插件所需要的信息-->
        <plugin>
          <!--插件在仓库里的groupId-->
          <groupId>org.apache.maven.plugins</groupId>
          <!--插件在仓库里的artifacrId-->
          <artifactId>maven-jar-plugin</artifactId>
          <!--被使用的插件的版本-->
          <version>${maven-jar-plugin.version}</version>
          <!--是否从该插件下载maven扩展-->
          <extensions>true</extensions>
          <!--在构建生命周期中执行一组目标的配置，每个目标可能有不同的配置-->
          <executions>
            <!--execution包含了插件执行需要的信息-->
            <execution>
              <!--执行目标的标识符，用于表示构建过程中的目标，或者匹配继承中需要合并的目标-->
              <id>demo</id>
              <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->
              <phase>package</phase>
              <!--配置的执行目标-->
              <goals>
                <goal>jar</goal>
              </goals>
              <!--配置是否被传播到子pom-->
              <inherited>true</inherited>
              <!--作为dom对象的配置-->
              <configuration></configuration>
            </execution>
          </executions>
          <!--项目引入插件所需要的额外依赖-->
          <!--解析，详见dependencies-->
          <dependencies></dependencies>
          <!--任何配置是否被传播到子项目-->
          <inherited>true</inherited>
          <!--作为dom对象的配置-->
          <configuration></configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--该项目使用的插件列表-->
    <plugins>
      <!--plugin元素包含插件所需要的信息-->
      <plugin>
        <!--插件在仓库里的groupId-->
        <groupId>org.apache.maven.plugins</groupId>
        <!--插件在仓库里的artifacrId-->
        <artifactId>maven-jar-plugin</artifactId>
        <!--被使用的插件的版本-->
        <version>${maven-jar-plugin.version}</version>
        <!--是否从该插件下载maven扩展-->
        <extensions>true</extensions>
        <!--在构建生命周期中执行一组目标的配置，每个目标可能有不同的配置-->
        <executions>
          <!--execution包含了插件执行需要的信息-->
          <execution>
            <!--执行目标的标识符，用于表示构建过程中的目标，或者匹配继承中需要合并的目标-->
            <id>demo</id>
            <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->
            <phase>package</phase>
            <!--配置的执行目标-->
            <goals>
              <goal>jar</goal>
            </goals>
            <!--配置是否被传播到子pom-->
            <inherited>true</inherited>
            <!--作为dom对象的配置-->
            <configuration></configuration>
          </execution>
        </executions>
        <!--项目引入插件所需要的额外依赖-->
        <!--解析，详见dependencies-->
        <dependencies></dependencies>
        <!--任何配置是否被传播到子项目-->
        <inherited>true</inherited>
        <!--作为dom对象的配置-->
        <configuration></configuration>
      </plugin>
    </plugins>
  </build>

  <!--在列的项目构建profile，如果被激活，则修改构建处理-->
  <profiles>
    <!--根据环境参数或命令行参数激活某个构建处理-->
    <profile>
      <!--构建配置的唯一标识符，即用于命令行激活，也用于继承时合并具有相同标识符的profile-->
      <id>docker</id>
      <!--自动触发profile的条件逻辑，activation时profile的开启钥匙，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值，这些环境通过activatiion元素指定。
      activation并不是激活profile的唯一方式-->
      <activation>
        <!--profile默认的是否激活的标志-->
        <activeByDefault>true</activeByDefault>
        <!--当匹配到的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK-->
        <jdk>1.7</jdk>
        <!--当匹配的操作系统被检测到，profile被激活。os元素可以定义一些操作系统相关的属性-->
        <os>
          <!--激活profile文件的操作系统的名字-->
          <name>Windows XP</name>
          <!--激活操作系统所属家族-->
          <family>Windows</family>
          <!--激活profile文件系统的版本-->
          <version>5.1.2600</version>
          <!--激活profile的操作系统体系结构-->
          <arch>x86</arch>
        </os>
        <!-- 如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile
             就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 -->
        <property>
          <!-- 激活profile的属性的名称 -->
          <name>docker</name>
          <!-- 激活profile的属性的值 -->
          <value>docker</value>
        </property>
        <!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活
                     profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 -->
        <file>
          <!-- 如果指定的文件存在，则激活profile。 -->
          <exists>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</exists>
          <!-- 如果指定的文件不存在，则激活profile。 -->
          <missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</missing>
        </file>
      </activation>
      <!-- 构建项目所需要的信息。参见build元素 -->
      <build></build>
      <!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的
                       相对路径 -->
      <modules>
        <!--子项目相对路径-->
        <module></module>
      </modules>
      <!-- 发现依赖和扩展的远程仓库列表。 -->
      <!-- 参见repositories/repository元素 -->
      <repositories></repositories>

      <!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
      <!-- 包含需要连接到远程插件仓库的信息.参见repositories元素 -->
      <pluginRepositories></pluginRepositories>

      <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的
           仓库中下载。要获取更多信息，请看项目依赖机制。 -->
      <!-- 参见dependencies元素 -->
      <dependencies></dependencies>

      <!-- 不赞成使用. 现在Maven忽略该元素，参见reports元素. -->
      <reports></reports>

      <!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看
           到所有报表的链接。参见reporting元素 -->
      <reporting></reporting>

      <!-- 参见dependencyManagement元素 -->
      <dependencyManagement></dependencyManagement>

      <!-- 参见distributionManagement元素 -->
      <distributionManagement></distributionManagement>

      <!-- 参见properties元素 -->
      <properties/>
    </profile>
  </profiles>

  <!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
  <modules>
    <!--子项目相对路径-->
    <module></module>
  </modules>

  <!-- 发现依赖和扩展的远程仓库列表。 -->
  <repositories>
    <!-- 包含需要连接到远程仓库的信息 -->
    <repository>
      <!-- 如何处理远程仓库里发布版本的下载 -->
      <releases>
        <!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
        <enabled>true</enabled>
        <!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），
             daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
        <updatePolicy>daily</updatePolicy>
        <!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 -->
        <checksumPolicy>fail</checksumPolicy>
      </releases>
      <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，
           为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
      <!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
      <id>banseon-repository-proxy</id>
      <!-- 远程仓库名称 -->
      <name>banseon-repository-proxy</name>
      <!-- 远程仓库URL，按protocol://hostname/path形式 -->
      <url>http://192.168.1.169:9999/repository/</url>
      <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认
           的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->
      <layout>default</layout>
    </repository>
  </repositories>

  <!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
  <!-- 包含需要连接到远程插件仓库的信息.参见repositories元素 -->
  <pluginRepositories></pluginRepositories>

  <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。
         要获取更多信息，请看项目依赖机制。 -->
  <dependencies>
    <dependency>
      <!-- 依赖的group ID -->
      <groupId>org.apache.maven</groupId>
      <!-- 依赖的artifact ID -->
      <artifactId>maven-artifact</artifactId>
      <!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
      <version>3.0.4</version>
      <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展
           名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。
           如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 -->
      <type>jar</type>
      <!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，
           如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生
           成两个单独的JAR构件。 -->
      <classifier>1.8</classifier>
      <!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
          - compile ：默认范围，用于编译，对主程序有效，对测试程序有效，参与打包，参与部署。例如Log4j
          - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath。对主程序有效，对测试程序有效，不参与打包，不参与部署。例如：servlet-api.jar
          - runtime: 在执行时需要使用。在测试，运行时依赖，在编译时不依赖。
          - test: 用于test任务时使用,对主程序无效，对测试程序有效，不参与打包，不参与部署。例如：Junit
          - system: 需要外在提供相应的元素。通过systemPath来取得
          - systemPath: 仅用于范围为system。提供相应的路径
          - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 -->
      <scope>test</scope>
      <!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件
           系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 -->
      <systemPath></systemPath>
      <!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的
           依赖。此元素主要用于解决版本冲突问题 -->
      <exclusions>
        <exclusion>
          <artifactId>spring-core</artifactId>
          <groupId>org.springframework</groupId>
        </exclusion>
      </exclusions>
      <!-- 可选依赖，optional标签标示该依赖是否可选，默认是false。如果为true，则标示该依赖不会传递下去，如果为false，则会传递下去。
        如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 -->
      <optional>false</optional>
    </dependency>
  </dependencies>

  <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖
        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过
            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 -->
  <dependencyManagement>
    <!-- 参见dependencies/dependency元素 -->
    <dependencies>
    </dependencies>
  </dependencyManagement>

  <!-- 不赞成使用. 现在Maven忽略该元素. -->
  <reports></reports>

  <!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 -->
  <reporting>
    <!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 -->
    <excludeDefaults>true</excludeDefaults>
    <!-- 所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 -->
    <outputDirectory>src</outputDirectory>
    <!-- 使用的报表插件和他们的配置。 -->
    <plugins>
      <!-- plugin元素包含描述报表插件需要的信息 -->
      <plugin>
        <!-- 报表插件在仓库里的group ID -->
        <groupId>org.apache.maven.plugins</groupId>
        <!-- 报表插件在仓库里的artifact ID -->
        <artifactId>maven-assembly-plugin</artifactId>
        <!-- 被使用的报表插件的版本（或版本范围） -->
        <!--<version></version>-->
        <!-- 任何配置是否被传播到子项目 -->
        <inherited>true</inherited>
        <!-- 报表插件的配置 -->
        <configuration></configuration>
        <!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，
             有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报
             表集，对应另一个执行目标 -->
        <reportSets>
          <!-- 表示报表的一个集合，以及产生该集合的配置 -->
          <reportSet>
            <!-- 报表集合的唯一标识符，POM继承时用到 -->
            <id>report</id>
            <!-- 产生报表集合时，被使用的报表的配置 -->
            <configuration></configuration>
            <!-- 配置是否被继承到子POMs -->
            <inherited>true</inherited>
            <!-- 这个集合里使用到哪些报表 -->
            <reports>
              <report>index</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者
         把构件部署到远程仓库。 -->
  <distributionManagement>
    <!-- 部署项目产生的构件到远程仓库需要的信息 -->
    <repository>
      <!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 -->
      <uniqueVersion>true</uniqueVersion>
      <id>demo</id>
      <name>demo</name>
      <url>file://${basedir}/target/deploy</url>
      <layout>default</layout>
    </repository>
    <!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见
         distributionManagement/repository元素 -->
    <snapshotRepository>
      <uniqueVersion>true</uniqueVersion>
      <id>demo</id>
      <name>demo</name>
      <url>file://${basedir}/target/deploy</url>
      <layout>default</layout>
    </snapshotRepository>
    <!-- 部署项目的网站需要的信息 -->
    <site>
      <!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 -->
      <id>demo</id>
      <!-- 部署位置的名称 -->
      <name>business api website</name>
      <!-- 部署位置的URL，按protocol://hostname/path形式 -->
      <url>
        file://${basedir}/target/deploy
      </url>
    </site>
    <!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位
         那些不在仓库里的构件（由于license限制）。 -->
    <downloadUrl/>
    <!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 -->
    <relocation>
      <!-- 构件新的group ID -->
      <groupId>org.apache.maven.plugins</groupId>
      <!-- 构件新的artifact ID -->
      <artifactId>maven-jar-plugin</artifactId>
      <!-- 构件新的版本号 -->
      <version>3.0.4</version>
      <!-- 显示给用户的，关于移动的额外信息，例如原因。 -->
      <message>test</message>
    </relocation>
    <!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值
         有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven
         2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 -->
    <status>verified</status>
  </distributionManagement>

  <!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里
         activation元素的说明）。格式是<name>value</name>。 -->
  <properties>
    <basedir>f:/MyFiles</basedir>
  </properties>

</project>
